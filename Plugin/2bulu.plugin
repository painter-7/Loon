[Plugin]
name = 两步路云空间助手
desc = 自动签到+容量监控
version = 2.0.1
author = painter-7
minLoonVersion = 3.2.0
icon = https://raw.githubusercontent.com/painter-7/Loon/main/Icon/2bulu.png
updateURL = https://raw.githubusercontent.com/painter-7/Loon/main/Plugin/2bulu.plugin

[mitm]
hostname = helper.2bulu.com

[Script]
http-request ^https:\/\/helper\.2bulu\.com\/dataSpace\/(claimCapacity|getStorageSpace) script-path=https://raw.githubusercontent.com/painter-7/Loon/main/Plugin/2bulu.plugin, timeout=10, tag=两步路数据捕获

cron "0 9 * * *" script-path=https://raw.githubusercontent.com/painter-7/Loon/main/Plugin/2bulu.plugin, timeout=30, tag=两步路自动任务

[Local]
^https?://helper\.2bulu\.com/dataSpace/(claimCapacity|getStorageSpace) url script-response-body

(() => {
  "use strict";
  
  // 数据捕获模块
  const captureKeys = {
    authCode: ($request.url.match(/authCode=([^&]+)/) || [])[1],
    userId: ($request.url.match(/userId=(\d+)/) || [])[1],
    psign: ($request.url.match(/psign=([a-f0-9]+)/) || [])[1],
    token: ($request.headers['Cookie']?.match(/token=([^;]+)/) || [])[1]
  };

  Object.entries(captureKeys).forEach(([key, value]) => {
    if (value) $persistentStore.write(value, `2bulu_${key}`);
  });
  
  $done();
})();

const _2bulu = {
  base: "https://helper.2bulu.com/dataSpace/",
  cfg: {
    psign: $persistentStore.read("2bulu_psign"),
    auth: $persistentStore.read("2bulu_authCode"),
    uid: $persistentStore.read("2bulu_userId"),
    token: $persistentStore.read("2bulu_token")
  },

  async execute() {
    try {
      if (!this.validateCredentials()) return;
      
      const signResult = await this.performSignIn();
      const spaceData = await this.fetchSpaceInfo();
      this.sendNotification(signResult, spaceData);
    } catch (error) {
      $notification.post("❗ 执行异常", error.message, "");
    }
  },

  // 凭证验证
  validateCredentials() {
    const requiredKeys = ['auth', 'uid', 'psign', 'token'];
    const isValid = requiredKeys.every(k => this.cfg[k]);
    
    if (!isValid) {
      $notification.post("🔑 凭证缺失", "请先在APP完成一次手动操作", "");
      return false;
    }
    return true;
  },

  // 执行签到
  async performSignIn() {
    const response = await $http.post({
      url: `${this.base}claimCapacity?${this.buildQueryString()}`,
      headers: this.buildHeaders()
    });
    
    if (response.data?.errCode !== "0") {
      throw new Error(`签到失败: ${response.data?.errMsg || '未知错误'}`);
    }
    
    return {
      capacity: this.formatCapacity(response.data.data?.dataSpaceTaskInfos)
    };
  },

  // 获取存储信息
  async fetchSpaceInfo() {
    const response = await $http.get({
      url: `${this.base}getStorageSpace?${this.buildQueryString()}`,
      headers: this.buildHeaders()
    });
    
    return this.formatSpaceInfo(response.data?.data);
  },

  // 构建查询参数
  buildQueryString() {
    return `psign=${this.cfg.psign}&authCode=${this.cfg.auth}&userId=${this.cfg.uid}&p_appVersion=7.8.9`;
  },

  // 构建请求头
  buildHeaders() {
    return {
      "Cookie": `authCode=${this.cfg.auth}; token=${this.cfg.token}`,
      "User-Agent": "OutdoorAssistant/7.8.9 (2bulu.plugin)",
      "X-Requested-With": "XMLHttpRequest"
    };
  },

  // 格式化容量信息
  formatCapacity(tasks = []) {
    const targetTask = tasks.find(t => t.type === 0);
    return targetTask ? 
      `${(targetTask.capacity / 1048576).toFixed(1)} MB` : 
      "容量数据异常";
  },

  // 格式化存储信息
  formatSpaceInfo(data = {}) {
    return {
      total: `${(data.sumCapacity / 1073741824).toFixed(2)} GB`,
      used: `${(data.useCapacity / 1073741824).toFixed(2)} GB`,
      pendingTasks: data.dataSpaceTaskInfos?.filter(t => t.status === 0).length || 0
    };
  },

  // 发送通知
  sendNotification(signResult, spaceInfo) {
    $notification.post(
      "📦 云空间报告", 
      `本次获得：${signResult.capacity}\n存储状态：${spaceInfo.used} 已用 / ${spaceInfo.total} 总量`,
      `待领取任务：${spaceInfo.pendingTasks} 个 | 插件版本：v2.1`
    );
  }
};

// 执行主程序
_2bulu.execute();